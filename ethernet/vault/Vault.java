package javawrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class Vault extends Contract {
    public static final String BINARY = "61018060405234801562000011575f80fd5b5060405162004b4138038062004b4183398181016040528101906200003791906200030f565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050620000e56040518060400160405280600b81526020017f4e4f545f535441525445440000000000000000000000000000000000000000008152506200027960201b60201c565b60c08181525050620001326040518060400160405280600781526020017f4f4e5f53414c45000000000000000000000000000000000000000000000000008152506200027960201b60201c565b60e081815250506200017f6040518060400160405280600681526020017f4641494c454400000000000000000000000000000000000000000000000000008152506200027960201b60201c565b6101008181525050620001cd6040518060400160405280600b81526020017f53414c455f434c4f5345440000000000000000000000000000000000000000008152506200027960201b60201c565b61012081815250506200021b6040518060400160405280600781526020017f52554e4e494e47000000000000000000000000000000000000000000000000008152506200027960201b60201c565b6101408181525050620002696040518060400160405280600581526020017f454e4445440000000000000000000000000000000000000000000000000000008152506200027960201b60201c565b61016081815250505050620003e0565b5f816040516020016200028d9190620003c8565b604051602081830303815290604052805190602001209050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620002d982620002ae565b9050919050565b620002eb81620002cd565b8114620002f6575f80fd5b50565b5f815190506200030981620002e0565b92915050565b5f8060408385031215620003285762000327620002aa565b5b5f6200033785828601620002f9565b92505060206200034a85828601620002f9565b9150509250929050565b5f81519050919050565b5f81905092915050565b5f5b83811015620003875780820151818401526020810190506200036a565b5f8484015250505050565b5f6200039e8262000354565b620003aa81856200035e565b9350620003bc81856020860162000368565b80840191505092915050565b5f620003d5828462000392565b915081905092915050565b60805160a05160c05160e051610100516101205161014051610160516146c9620004785f395f81816106aa01526112d901525f81816117b00152611f8001525f50505f818161031f01526111cd01525f8181610f2101528181611c8b01528181612c060152612cf501525f8181610eae0152610ef801525f8181610dba015281816116e301526122b101525f6129fb01526146c95ff3fe6080604052600436106100aa575f3560e01c80638df82800116100635780638df82800146101d857806390210d7e14610200578063af0146341461021c578063b7760c8f1461025b578063dd66ddfb14610283578063e2bbb158146102ab576100b1565b80632e1a7d4d146100b5578063379607f5146100dd5780633dd432c2146101055780635174a11414610141578063651fbdfe146101695780636b966b9f146101b0576100b1565b366100b157005b5f80fd5b3480156100c0575f80fd5b506100db60048036038101906100d69190613112565b6102c7565b005b3480156100e8575f80fd5b5061010360048036038101906100fe9190613112565b610652565b005b348015610110575f80fd5b5061012b60048036038101906101269190613112565b610b58565b60405161013891906131c7565b60405180910390f35b34801561014c575f80fd5b5061016760048036038101906101629190613209565b610da1565b005b348015610174575f80fd5b5061018f600480360381019061018a9190613112565b610fc3565b6040516101a79c9b9a99989796959493929190613282565b60405180910390f35b3480156101bb575f80fd5b506101d660048036038101906101d19190613364565b61107b565b005b3480156101e3575f80fd5b506101fe60048036038101906101f99190613112565b6116ca565b005b61021a60048036038101906102159190613364565b611c33565b005b348015610227575f80fd5b50610242600480360381019061023d9190613112565b611ec4565b60405161025294939291906133ce565b60405180910390f35b348015610266575f80fd5b50610281600480360381019061027c919061344c565b611f28565b005b34801561028e575f80fd5b506102a960048036038101906102a49190613723565b612298565b005b6102c560048036038101906102c0919061376a565b612bae565b005b805f805f8381526020019081526020015f205f01540361031c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610313906137f2565b60405180910390fd5b817f000000000000000000000000000000000000000000000000000000000000000061034782612c7f565b14610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037e9061385a565b60405180910390fd5b5f60015f8581526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103f79190613878565b602060405180830381865afa158015610412573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061043691906138a5565b90505f811161047a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104719061391a565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b81526004016104b5929190613938565b5f604051808303815f87803b1580156104cc575f80fd5b505af11580156104de573d5f803e3d5ffd5b505050505f805f8781526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610594573373ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f1935050505015801561058e573d5f803e3d5ffd5b50610611565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016105cf929190613938565b6020604051808303815f875af11580156105eb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061060f9190613989565b505b7f8353ffcac0876ad14e226d9783c04540bfebf13871e868157d2a391cad98e91886336040516106429291906139b4565b60405180910390a1505050505050565b805f805f8381526020019081526020015f205f0154036106a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069e906137f2565b60405180910390fd5b817f00000000000000000000000000000000000000000000000000000000000000006106d282612c7f565b14610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990613a25565b60405180910390fd5b5f60015f8581526020019081526020015f209050600115158160020160019054906101000a900460ff1615151461077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077590613a8d565b60405180910390fd5b5f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ea573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061080e91906138a5565b90505f4790505f821115801561082457505f8111155b15610864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085b90613af5565b60405180910390fd5b5f835f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016108c09190613878565b602060405180830381865afa1580156108db573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108ff91906138a5565b90505f8111610943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093a9061391a565b60405180910390fd5b5f805f8981526020019081526020015f209050845f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b81526004016109b3929190613938565b5f604051808303815f87803b1580156109ca575f80fd5b505af11580156109dc573d5f803e3d5ffd5b505050505f5b81600201805490508160ff161015610b14575f826002018260ff1681548110610a0e57610a0d613b13565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f86846003018460ff1681548110610a5357610a52613b13565b5b905f5260205f20015486610a679190613b6d565b610a719190613bdb565b9050875f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386c69af83383856040518463ffffffff1660e01b8152600401610ad293929190613c1a565b5f604051808303815f87803b158015610ae9575f80fd5b505af1158015610afb573d5f803e3d5ffd5b5050505050508080610b0c90613c5b565b9150506109e2565b507f35538759d80c1fd7bb450a0d05601db5a99fa8b5d073a07c847a9fd61029b1078833604051610b469291906139b4565b60405180910390a15050505050505050565b60605f805f8481526020019081526020015f2090505f60015f8581526020019081526020015f2090505f826006015490505f836007015490505f846008015490505f856009015490505f856001015490505f876004015490505f886005015490506040518060400160405280600b81526020017f4e4f545f535441525445440000000000000000000000000000000000000000008152509950864210158015610c0057508542105b8015610c0b57508183105b15610c4d576040518060400160405280600781526020017f4f4e5f53414c45000000000000000000000000000000000000000000000000008152509950610d93565b854210158015610c5c57508342105b8015610c6757508083105b15610ca9576040518060400160405280600681526020017f4641494c454400000000000000000000000000000000000000000000000000008152509950610d92565b8542101580610cb85750818310155b8015610cc357508442105b15610d05576040518060400160405280600b81526020017f53414c455f434c4f5345440000000000000000000000000000000000000000008152509950610d91565b844210158015610d155750834211155b15610d57576040518060400160405280600781526020017f52554e4e494e47000000000000000000000000000000000000000000000000008152509950610d90565b6040518060400160405280600581526020017f454e44454400000000000000000000000000000000000000000000000000000081525099505b5b5b5b505050505050505050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2690613ccd565b60405180910390fd5b805f01355f805f8381526020019081526020015f205f015403610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e906137f2565b60405180910390fd5b5f805f845f013581526020019081526020015f2090505f610eaa845f0135612c7f565b90507f000000000000000000000000000000000000000000000000000000000000000081148015610ee357508360200135826006015414155b15610ef657836020013582600601819055505b7f0000000000000000000000000000000000000000000000000000000000000000811480610f4357507f000000000000000000000000000000000000000000000000000000000000000081145b15610f83578360400135826007015414610f6557836040013582600701819055505b8360600135826004015414610f8257836060013582600401819055505b5b7f164f7b2ab803097dab5e39f06d2e4f3c3ddc5d4171abbdcc3e76443b8359c7f5845f0135604051610fb59190613ceb565b60405180910390a150505050565b5f602052805f5260405f205f91509050805f015490806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600401549080600501549080600601549080600701549080600801549080600901549080600a015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600b01549080600c01549080600d015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508c565b825f805f8381526020019081526020015f205f0154036110d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c7906137f2565b60405180910390fd5b5f6110da85612c7f565b90505f60015f8781526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016111489190613878565b602060405180830381865afa158015611163573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118791906138a5565b90505f81116111cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c290613d4e565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000082036112d75760015f8781526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b815260040161125f929190613938565b5f604051808303815f87803b158015611276575f80fd5b505af1158015611288573d5f803e3d5ffd5b50505050611297858233612c9d565b7fad7ebad7b8c0da3edfc027d2b5b7ae316bfe62ce082d5ed400b7861cd362c7448686866040516112ca93929190613d6c565b60405180910390a16116c2565b7f000000000000000000000000000000000000000000000000000000000000000082036116c15760015f808881526020019081526020015f206002018054905011806113cd57505f808781526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff165f808881526020019081526020015f206002015f8154811061138c5761138b613b13565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561140d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140490613deb565b60405180910390fd5b5f60015f8881526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611489573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114ad91906138a5565b905060015f8881526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b815260040161151c929190613938565b5f604051808303815f87803b158015611533575f80fd5b505af1158015611545573d5f803e3d5ffd5b505050505f815f808a81526020019081526020015f206003015f815481106115705761156f613b13565b5b905f5260205f200154846115849190613b6d565b61158e9190613bdb565b905060015f8981526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386c69af830835f808d81526020019081526020015f206002015f8154811061160557611604613b13565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b815260040161164b93929190613c1a565b5f604051808303815f87803b158015611662575f80fd5b505af1158015611674573d5f803e3d5ffd5b50505050611683878233612c9d565b7fad7ebad7b8c0da3edfc027d2b5b7ae316bfe62ce082d5ed400b7861cd362c7448888886040516116b693929190613d6c565b60405180910390a150505b5b505050505050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614611758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174f90613ccd565b60405180910390fd5b805f805f8381526020019081526020015f205f0154036117ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a4906137f2565b60405180910390fd5b817f00000000000000000000000000000000000000000000000000000000000000006117d882612c7f565b14611818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180f90613e53565b60405180910390fd5b5f151560015f8581526020019081526020015f2060020160019054906101000a900460ff1615151461187f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187690613ebb565b60405180910390fd5b6001805f8581526020019081526020015f2060020160016101000a81548160ff0219169083151502179055505f5b5f808581526020019081526020015f20600201805490508161ffff161015611bf6575f805f8681526020019081526020015f206002018261ffff16815481106118f9576118f8613b13565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119ac5760015f8461ffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16319050611a5d565b8173ffffffffffffffffffffffffffffffffffffffff166370a0823160015f8661ffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611a1b9190613878565b602060405180830381865afa158015611a36573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a5a91906138a5565b90505b5f612710825f808a81526020019081526020015f20600b0154611a809190613b6d565b611a8a9190613bdb565b90505f612710835f808b81526020019081526020015f20600c0154611aaf9190613b6d565b611ab99190613bdb565b90505f8183611ac89190613ed9565b90505f8185611ad79190613f0c565b905060015f8b81526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386c69af85f808d81526020019081526020015f20600a015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684896040518463ffffffff1660e01b8152600401611b7a93929190613c1a565b5f604051808303815f87803b158015611b91575f80fd5b505af1158015611ba3573d5f803e3d5ffd5b50505050805f808c81526020019081526020015f206003018861ffff1681548110611bd157611bd0613b13565b5b905f5260205f2001819055505050505050508080611bee90613f4c565b9150506118ad565b507f2a45eee61b61ef4932e2d79b32be61a1a538cbe00381faffb4d1cf3b1268c46b83604051611c269190613ceb565b60405180910390a1505050565b825f805f8381526020019081526020015f205f015403611c88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7f906137f2565b60405180910390fd5b837f0000000000000000000000000000000000000000000000000000000000000000611cb382612c7f565b14611cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cea90613fbf565b60405180910390fd5b5f805f8781526020019081526020015f2090505f60015f8881526020019081526020015f2090508160040154868260010154611d2f9190613ed9565b1115611d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6790614027565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff16826001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611e0e5785341015611e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e009061408f565b60405180910390fd5b611eb0565b816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630896040518463ffffffff1660e01b8152600401611e6e939291906140ad565b6020604051808303815f875af1158015611e8a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611eae9190613989565b505b611ebb878787612c9d565b50505050505050565b6001602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015f9054906101000a900460ff16908060020160019054906101000a900460ff16905084565b815f805f8381526020019081526020015f205f015403611f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f74906137f2565b60405180910390fd5b827f0000000000000000000000000000000000000000000000000000000000000000611fa882612c7f565b14611fe8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fdf90613e53565b60405180910390fd5b5f60015f8681526020019081526020015f2090505f1515816002015f9054906101000a900460ff16151514612052576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120499061412c565b60405180910390fd5b5f805f8781526020019081526020015f2090503373ffffffffffffffffffffffffffffffffffffffff1681600d015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ed90614194565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff16816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612199578473ffffffffffffffffffffffffffffffffffffffff166108fc836001015490811502906040515f60405180830381858888f19350505050158015612193573d5f803e3d5ffd5b5061223d565b806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3384600101546040518363ffffffff1660e01b81526004016121fb929190613938565b6020604051808303815f875af1158015612217573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061223b9190613989565b505b6001826002015f6101000a81548160ff0219169083151502179055507f248dd4076d0a389d795107efafd558ce7f31ae37b441ccb9a599c60868f480d5866040516122889190613ceb565b60405180910390a1505050505050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614612326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231d90613ccd565b60405180910390fd5b805f01515f805f8381526020019081526020015f205f01541461237e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612375906141fc565b60405180910390fd5b5f825f0151116123c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ba90614264565b60405180910390fd5b81604001515f815181106123da576123d9613b13565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614612453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244a906142cc565b60405180910390fd5b8160e001518261010001511161249e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249590614334565b60405180910390fd5b8160c001518260e0015110156124e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e090614334565b60405180910390fd5b8160a001518260c0015111612533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252a90614334565b60405180910390fd5b5f826060015111612579576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125709061439c565b60405180910390fd5b5f8260800151116125bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b690614404565b60405180910390fd5b81608001518260600151101561260a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126019061439c565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1682610180015173ffffffffffffffffffffffffffffffffffffffff160361267d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126749061446c565b60405180910390fd5b5f601290505f73ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff161461272d57826020015173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612706573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061272a91906144b4565b90505b612735612efe565b835f0151815f0181815250508360200151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050836060015181608001818152505083608001518160a00181815250508360a001518160c00181815250508360c001518160e00181815250508360e00151816101000181815250508361010001518161012001818152505083610120015181610140019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508361014001518161016001818152505083610160015181610180018181525050836101800151816101a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050805f80835f015181526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906128ee929190612fa3565b50606082015181600301908051906020019061290b92919061302a565b506080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b015561018082015181600c01556101a082015181600d015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506129f9613075565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631e568333846040518263ffffffff1660e01b8152600401612a529190614582565b6020604051808303815f875af1158015612a6e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a9291906145d5565b815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060015f845f015181526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015f6101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff0219169083151502179055509050507f07eac9a0695a188fe9d6fd680bcbbbe39041fb114d5d7ac11252401391f79307825f0151604051612b9f9190613ceb565b60405180910390a15050505050565b815f805f8381526020019081526020015f205f015403612c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bfa906137f2565b60405180910390fd5b827f0000000000000000000000000000000000000000000000000000000000000000612c2e82612c7f565b14612c6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6590613fbf565b60405180910390fd5b612c79848433611c33565b50505050565b5f80612c8a83610b58565b9050612c9581612ecf565b915050919050565b825f805f8381526020019081526020015f205f015403612cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ce9906137f2565b60405180910390fd5b837f0000000000000000000000000000000000000000000000000000000000000000612d1d82612c7f565b14612d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5490613fbf565b60405180910390fd5b60015f8681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984866040518363ffffffff1660e01b8152600401612dca929190613938565b5f604051808303815f87803b158015612de1575f80fd5b505af1158015612df3573d5f803e3d5ffd5b505050505f805f8781526020019081526020015f206004015490505f8560015f8981526020019081526020015f2060010154612e2f9190613ed9565b9050818110612e70577f7e1f5a77187e90f1751221bbd46ae08322d11774a58ae99cdb7d8573f4140c9087604051612e679190613ceb565b60405180910390a15b8060015f8981526020019081526020015f20600101819055507fd36a2f67d06d285786f61a32b052b9ace6b0b7abef5177b54358abdc83a0b69b87868884604051612ebe9493929190614600565b60405180910390a150505050505050565b5f81604051602001612ee1919061467d565b604051602081830303815290604052805190602001209050919050565b604051806101c001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b828054828255905f5260205f20908101928215613019579160200282015b82811115613018578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612fc1565b5b50905061302691906130b3565b5090565b828054828255905f5260205f20908101928215613064579160200282015b82811115613063578251825591602001919060010190613048565b5b50905061307191906130b3565b5090565b60405180608001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f151581526020015f151581525090565b5b808211156130ca575f815f9055506001016130b4565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b6130f1816130df565b81146130fb575f80fd5b50565b5f8135905061310c816130e8565b92915050565b5f60208284031215613127576131266130d7565b5b5f613134848285016130fe565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015613174578082015181840152602081019050613159565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6131998261313d565b6131a38185613147565b93506131b3818560208601613157565b6131bc8161317f565b840191505092915050565b5f6020820190508181035f8301526131df818461318f565b905092915050565b5f80fd5b5f60808284031215613200576131ff6131e7565b5b81905092915050565b5f6080828403121561321e5761321d6130d7565b5b5f61322b848285016131eb565b91505092915050565b61323d816130df565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61326c82613243565b9050919050565b61327c81613262565b82525050565b5f610180820190506132965f83018f613234565b6132a3602083018e613273565b6132b0604083018d613234565b6132bd606083018c613234565b6132ca608083018b613234565b6132d760a083018a613234565b6132e460c0830189613234565b6132f160e0830188613234565b6132ff610100830187613273565b61330d610120830186613234565b61331b610140830185613234565b613329610160830184613273565b9d9c50505050505050505050505050565b61334381613262565b811461334d575f80fd5b50565b5f8135905061335e8161333a565b92915050565b5f805f6060848603121561337b5761337a6130d7565b5b5f613388868287016130fe565b9350506020613399868287016130fe565b92505060406133aa86828701613350565b9150509250925092565b5f8115159050919050565b6133c8816133b4565b82525050565b5f6080820190506133e15f830187613273565b6133ee6020830186613234565b6133fb60408301856133bf565b61340860608301846133bf565b95945050505050565b5f61341b82613243565b9050919050565b61342b81613411565b8114613435575f80fd5b50565b5f8135905061344681613422565b92915050565b5f8060408385031215613462576134616130d7565b5b5f61346f858286016130fe565b925050602061348085828601613438565b9150509250929050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6134c48261317f565b810181811067ffffffffffffffff821117156134e3576134e261348e565b5b80604052505050565b5f6134f56130ce565b905061350182826134bb565b919050565b5f80fd5b5f80fd5b5f67ffffffffffffffff8211156135285761352761348e565b5b602082029050602081019050919050565b5f80fd5b5f61354f61354a8461350e565b6134ec565b9050808382526020820190506020840283018581111561357257613571613539565b5b835b8181101561359b57806135878882613350565b845260208401935050602081019050613574565b5050509392505050565b5f82601f8301126135b9576135b861350a565b5b81356135c984826020860161353d565b91505092915050565b5f6101a082840312156135e8576135e761348a565b5b6135f36101a06134ec565b90505f613602848285016130fe565b5f83015250602061361584828501613350565b602083015250604082013567ffffffffffffffff81111561363957613638613506565b5b613645848285016135a5565b6040830152506060613659848285016130fe565b606083015250608061366d848285016130fe565b60808301525060a0613681848285016130fe565b60a08301525060c0613695848285016130fe565b60c08301525060e06136a9848285016130fe565b60e0830152506101006136be848285016130fe565b610100830152506101206136d484828501613350565b610120830152506101406136ea848285016130fe565b61014083015250610160613700848285016130fe565b6101608301525061018061371684828501613350565b6101808301525092915050565b5f60208284031215613738576137376130d7565b5b5f82013567ffffffffffffffff811115613755576137546130db565b5b613761848285016135d2565b91505092915050565b5f80604083850312156137805761377f6130d7565b5b5f61378d858286016130fe565b925050602061379e858286016130fe565b9150509250929050565b7f7661756c74206e6f7420657869737473000000000000000000000000000000005f82015250565b5f6137dc601083613147565b91506137e7826137a8565b602082019050919050565b5f6020820190508181035f830152613809816137d0565b9050919050565b7f7661756c74206973206e6f74206661696c6564000000000000000000000000005f82015250565b5f613844601383613147565b915061384f82613810565b602082019050919050565b5f6020820190508181035f83015261387181613838565b9050919050565b5f60208201905061388b5f830184613273565b92915050565b5f8151905061389f816130e8565b92915050565b5f602082840312156138ba576138b96130d7565b5b5f6138c784828501613891565b91505092915050565b7f6c70546f6b656e2062616c616e6365206e6f7420656e6f7567680000000000005f82015250565b5f613904601a83613147565b915061390f826138d0565b602082019050919050565b5f6020820190508181035f830152613931816138f8565b9050919050565b5f60408201905061394b5f830185613273565b6139586020830184613234565b9392505050565b613968816133b4565b8114613972575f80fd5b50565b5f815190506139838161395f565b92915050565b5f6020828403121561399e5761399d6130d7565b5b5f6139ab84828501613975565b91505092915050565b5f6040820190506139c75f830185613234565b6139d46020830184613273565b9392505050565b7f7661756c74206973206e6f7420656e64656400000000000000000000000000005f82015250565b5f613a0f601283613147565b9150613a1a826139db565b602082019050919050565b5f6020820190508181035f830152613a3c81613a03565b9050919050565b7f6e6f7420736574746c65640000000000000000000000000000000000000000005f82015250565b5f613a77600b83613147565b9150613a8282613a43565b602082019050919050565b5f6020820190508181035f830152613aa481613a6b565b9050919050565b7f62616c616e6365206e6f7420656e6f75676800000000000000000000000000005f82015250565b5f613adf601283613147565b9150613aea82613aab565b602082019050919050565b5f6020820190508181035f830152613b0c81613ad3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613b77826130df565b9150613b82836130df565b9250828202613b90816130df565b91508282048414831517613ba757613ba6613b40565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613be5826130df565b9150613bf0836130df565b925082613c0057613bff613bae565b5b828204905092915050565b613c1481613411565b82525050565b5f606082019050613c2d5f830186613c0b565b613c3a6020830185613234565b613c476040830184613273565b949350505050565b5f60ff82169050919050565b5f613c6582613c4f565b915060ff8203613c7857613c77613b40565b5b600182019050919050565b7f72657175697265206d616e6167657200000000000000000000000000000000005f82015250565b5f613cb7600f83613147565b9150613cc282613c83565b602082019050919050565b5f6020820190508181035f830152613ce481613cab565b9050919050565b5f602082019050613cfe5f830184613234565b92915050565b7f6c702062616c616e6365206e6f7420656e6f75676800000000000000000000005f82015250565b5f613d38601583613147565b9150613d4382613d04565b602082019050919050565b5f6020820190508181035f830152613d6581613d2c565b9050919050565b5f606082019050613d7f5f830186613234565b613d8c6020830185613234565b613d996040830184613273565b949350505050565b7f696e76616c696420746f6b656e000000000000000000000000000000000000005f82015250565b5f613dd5600d83613147565b9150613de082613da1565b602082019050919050565b5f6020820190508181035f830152613e0281613dc9565b9050919050565b7f7661756c74206973206e6f742072756e6e696e670000000000000000000000005f82015250565b5f613e3d601483613147565b9150613e4882613e09565b602082019050919050565b5f6020820190508181035f830152613e6a81613e31565b9050919050565b7f7661756c7420736574746c6564000000000000000000000000000000000000005f82015250565b5f613ea5600d83613147565b9150613eb082613e71565b602082019050919050565b5f6020820190508181035f830152613ed281613e99565b9050919050565b5f613ee3826130df565b9150613eee836130df565b9250828201905080821115613f0657613f05613b40565b5b92915050565b5f613f16826130df565b9150613f21836130df565b9250828203905081811115613f3957613f38613b40565b5b92915050565b5f61ffff82169050919050565b5f613f5682613f3f565b915061ffff8203613f6a57613f69613b40565b5b600182019050919050565b7f7661756c74206973206e6f74206f6e2073616c650000000000000000000000005f82015250565b5f613fa9601483613147565b9150613fb482613f75565b602082019050919050565b5f6020820190508181035f830152613fd681613f9d565b9050919050565b7f63617061636974792065786365656400000000000000000000000000000000005f82015250565b5f614011600f83613147565b915061401c82613fdd565b602082019050919050565b5f6020820190508181035f83015261403e81614005565b9050919050565b7f7472616e736665722076616c7565206e6f7420656e6f756768000000000000005f82015250565b5f614079601983613147565b915061408482614045565b602082019050919050565b5f6020820190508181035f8301526140a68161406d565b9050919050565b5f6060820190506140c05f830186613273565b6140cd6020830185613273565b6140da6040830184613234565b949350505050565b7f686173207472616e7366657272656400000000000000000000000000000000005f82015250565b5f614116600f83613147565b9150614121826140e2565b602082019050919050565b5f6020820190508181035f8301526141438161410a565b9050919050565b7f6e6f74207369676e6572000000000000000000000000000000000000000000005f82015250565b5f61417e600a83613147565b91506141898261414a565b602082019050919050565b5f6020820190508181035f8301526141ab81614172565b9050919050565b7f7661756c742065786973747300000000000000000000000000000000000000005f82015250565b5f6141e6600c83613147565b91506141f1826141b2565b602082019050919050565b5f6020820190508181035f830152614213816141da565b9050919050565b7f696e76616c6964206964000000000000000000000000000000000000000000005f82015250565b5f61424e600a83613147565b91506142598261421a565b602082019050919050565b5f6020820190508181035f83015261427b81614242565b9050919050565b7f696e76616c696420636c61696d20746f6b656e000000000000000000000000005f82015250565b5f6142b6601383613147565b91506142c182614282565b602082019050919050565b5f6020820190508181035f8301526142e3816142aa565b9050919050565b7f696e76616c69642074696d6500000000000000000000000000000000000000005f82015250565b5f61431e600c83613147565b9150614329826142ea565b602082019050919050565b5f6020820190508181035f83015261434b81614312565b9050919050565b7f696e76616c6964207661756c74206361706163697479000000000000000000005f82015250565b5f614386601683613147565b915061439182614352565b602082019050919050565b5f6020820190508181035f8301526143b38161437a565b9050919050565b7f696e76616c6964207661756c74206c696d6974000000000000000000000000005f82015250565b5f6143ee601383613147565b91506143f9826143ba565b602082019050919050565b5f6020820190508181035f83015261441b816143e2565b9050919050565b7f696e76616c6964207472616e73666572207369676e65720000000000000000005f82015250565b5f614456601783613147565b915061446182614422565b602082019050919050565b5f6020820190508181035f8301526144838161444a565b9050919050565b61449381613c4f565b811461449d575f80fd5b50565b5f815190506144ae8161448a565b92915050565b5f602082840312156144c9576144c86130d7565b5b5f6144d6848285016144a0565b91505092915050565b7f7661756c74206c7020746f6b656e0000000000000000000000000000000000005f82015250565b5f614513600e83613147565b915061451e826144df565b602082019050919050565b7f5661756c745f4c50546f6b656e000000000000000000000000000000000000005f82015250565b5f61455d600d83613147565b915061456882614529565b602082019050919050565b61457c81613c4f565b82525050565b5f6060820190508181035f83015261459981614507565b905081810360208301526145ac81614551565b90506145bb6040830184614573565b92915050565b5f815190506145cf8161333a565b92915050565b5f602082840312156145ea576145e96130d7565b5b5f6145f7848285016145c1565b91505092915050565b5f6080820190506146135f830187613234565b6146206020830186613273565b61462d6040830185613234565b61463a6060830184613234565b95945050505050565b5f81905092915050565b5f6146578261313d565b6146618185614643565b9350614671818560208601613157565b80840191505092915050565b5f614688828461464d565b91508190509291505056fea264697066735822122043182142b9952890ee17f0f31ddd0637341c713059c58996907866cf9ffa44aa64736f6c63430008140033";

    public static final String FUNC_CLAIM = "claim";

    public static final String FUNC_CREATEVAULT = "createVault";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_DEPOSITFOR = "depositFor";

    public static final String FUNC_GETSTATUSBYID = "getStatusById";

    public static final String FUNC_IDVAULTINFOMAP = "idVaultInfoMap";

    public static final String FUNC_IDVAULTSTATEMAP = "idVaultStateMap";

    public static final String FUNC_REINVEST = "reinvest";

    public static final String FUNC_SETTLE = "settle";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_UPDATEVAULT = "updateVault";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event CLAIM_EVENT = new Event("Claim", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CREATE_EVENT = new Event("Create", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REINVEST_EVENT = new Event("Reinvest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SETTLE_EVENT = new Event("Settle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SOLDOUT_EVENT = new Event("SoldOut", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATE_EVENT = new Event("Update", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAW_EVENT = new Event("Withdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected Contracts_Vault_sol_Vault(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Contracts_Vault_sol_Vault(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Contracts_Vault_sol_Vault(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Contracts_Vault_sol_Vault(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ClaimEventResponse> getClaimEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CLAIM_EVENT, transactionReceipt);
        ArrayList<ClaimEventResponse> responses = new ArrayList<ClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClaimEventResponse typedResponse = new ClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClaimEventResponse> claimEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ClaimEventResponse>() {
            @Override
            public ClaimEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLAIM_EVENT, log);
                ClaimEventResponse typedResponse = new ClaimEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClaimEventResponse> claimEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLAIM_EVENT));
        return claimEventFlowable(filter);
    }

    public static List<CreateEventResponse> getCreateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CREATE_EVENT, transactionReceipt);
        ArrayList<CreateEventResponse> responses = new ArrayList<CreateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateEventResponse typedResponse = new CreateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateEventResponse> createEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CreateEventResponse>() {
            @Override
            public CreateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATE_EVENT, log);
                CreateEventResponse typedResponse = new CreateEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateEventResponse> createEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATE_EVENT));
        return createEventFlowable(filter);
    }

    public static List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.soldAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositEventResponse>() {
            @Override
            public DepositEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSIT_EVENT, log);
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.soldAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public static List<ReinvestEventResponse> getReinvestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REINVEST_EVENT, transactionReceipt);
        ArrayList<ReinvestEventResponse> responses = new ArrayList<ReinvestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReinvestEventResponse typedResponse = new ReinvestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReinvestEventResponse> reinvestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReinvestEventResponse>() {
            @Override
            public ReinvestEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REINVEST_EVENT, log);
                ReinvestEventResponse typedResponse = new ReinvestEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.investId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReinvestEventResponse> reinvestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REINVEST_EVENT));
        return reinvestEventFlowable(filter);
    }

    public static List<SettleEventResponse> getSettleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLE_EVENT, transactionReceipt);
        ArrayList<SettleEventResponse> responses = new ArrayList<SettleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettleEventResponse typedResponse = new SettleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SettleEventResponse> settleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SettleEventResponse>() {
            @Override
            public SettleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTLE_EVENT, log);
                SettleEventResponse typedResponse = new SettleEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SettleEventResponse> settleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLE_EVENT));
        return settleEventFlowable(filter);
    }

    public static List<SoldOutEventResponse> getSoldOutEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SOLDOUT_EVENT, transactionReceipt);
        ArrayList<SoldOutEventResponse> responses = new ArrayList<SoldOutEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SoldOutEventResponse typedResponse = new SoldOutEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SoldOutEventResponse> soldOutEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SoldOutEventResponse>() {
            @Override
            public SoldOutEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOLDOUT_EVENT, log);
                SoldOutEventResponse typedResponse = new SoldOutEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SoldOutEventResponse> soldOutEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOLDOUT_EVENT));
        return soldOutEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UpdateEventResponse> getUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPDATE_EVENT, transactionReceipt);
        ArrayList<UpdateEventResponse> responses = new ArrayList<UpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateEventResponse typedResponse = new UpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateEventResponse> updateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateEventResponse>() {
            @Override
            public UpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATE_EVENT, log);
                UpdateEventResponse typedResponse = new UpdateEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateEventResponse> updateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATE_EVENT));
        return updateEventFlowable(filter);
    }

    public static List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> claim(BigInteger vaultId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(vaultId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createVault(CreateVaultReq req) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEVAULT, 
                Arrays.<Type>asList(req), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(BigInteger vaultId, BigInteger amount, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(vaultId), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> depositFor(BigInteger vaultId, BigInteger amount, String account, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSITFOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(vaultId), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> getStatusById(BigInteger vaultId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSTATUSBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(vaultId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple12<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, String>> idVaultInfoMap(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_IDVAULTINFOMAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple12<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple12<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple12<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (String) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue(), 
                                (BigInteger) results.get(10).getValue(), 
                                (String) results.get(11).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, Boolean, Boolean>> idVaultStateMap(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_IDVAULTSTATEMAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, Boolean, Boolean>>(function,
                new Callable<Tuple4<String, BigInteger, Boolean, Boolean>>() {
                    @Override
                    public Tuple4<String, BigInteger, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, Boolean, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> reinvest(BigInteger vaultId, BigInteger investVaultId, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REINVEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(vaultId), 
                new org.web3j.abi.datatypes.generated.Uint256(investVaultId), 
                new org.web3j.abi.datatypes.Address(160, to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> settle(BigInteger vaultId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(vaultId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(BigInteger vaultId, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(vaultId), 
                new org.web3j.abi.datatypes.Address(160, to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateVault(UpdateVaultReq req) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEVAULT, 
                Arrays.<Type>asList(req), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger vaultId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(vaultId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Contracts_Vault_sol_Vault load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Contracts_Vault_sol_Vault(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Contracts_Vault_sol_Vault load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Contracts_Vault_sol_Vault(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Contracts_Vault_sol_Vault load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Contracts_Vault_sol_Vault(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Contracts_Vault_sol_Vault load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Contracts_Vault_sol_Vault(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Contracts_Vault_sol_Vault> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _lpTokenFactory, String _manager) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _lpTokenFactory), 
                new org.web3j.abi.datatypes.Address(160, _manager)));
        return deployRemoteCall(Contracts_Vault_sol_Vault.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Contracts_Vault_sol_Vault> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _lpTokenFactory, String _manager) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _lpTokenFactory), 
                new org.web3j.abi.datatypes.Address(160, _manager)));
        return deployRemoteCall(Contracts_Vault_sol_Vault.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Contracts_Vault_sol_Vault> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _lpTokenFactory, String _manager) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _lpTokenFactory), 
                new org.web3j.abi.datatypes.Address(160, _manager)));
        return deployRemoteCall(Contracts_Vault_sol_Vault.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Contracts_Vault_sol_Vault> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _lpTokenFactory, String _manager) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _lpTokenFactory), 
                new org.web3j.abi.datatypes.Address(160, _manager)));
        return deployRemoteCall(Contracts_Vault_sol_Vault.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class CreateVaultReq extends DynamicStruct {
        public BigInteger id;

        public String depositToken;

        public List<String> claimTokens;

        public BigInteger maxVaultCapacity;

        public BigInteger minVaultLimit;

        public BigInteger saleStartTime;

        public BigInteger saleEndTime;

        public BigInteger termStartTime;

        public BigInteger termEndTime;

        public String organization;

        public BigInteger mFee;

        public BigInteger rFee;

        public String transferSigner;

        public CreateVaultReq(BigInteger id, String depositToken, List<String> claimTokens, BigInteger maxVaultCapacity, BigInteger minVaultLimit, BigInteger saleStartTime, BigInteger saleEndTime, BigInteger termStartTime, BigInteger termEndTime, String organization, BigInteger mFee, BigInteger rFee, String transferSigner) {
            super(new org.web3j.abi.datatypes.generated.Uint256(id), 
                    new org.web3j.abi.datatypes.Address(160, depositToken), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                            org.web3j.abi.datatypes.Address.class,
                            org.web3j.abi.Utils.typeMap(claimTokens, org.web3j.abi.datatypes.Address.class)), 
                    new org.web3j.abi.datatypes.generated.Uint256(maxVaultCapacity), 
                    new org.web3j.abi.datatypes.generated.Uint256(minVaultLimit), 
                    new org.web3j.abi.datatypes.generated.Uint256(saleStartTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(saleEndTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(termStartTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(termEndTime), 
                    new org.web3j.abi.datatypes.Address(160, organization), 
                    new org.web3j.abi.datatypes.generated.Uint256(mFee), 
                    new org.web3j.abi.datatypes.generated.Uint256(rFee), 
                    new org.web3j.abi.datatypes.Address(160, transferSigner));
            this.id = id;
            this.depositToken = depositToken;
            this.claimTokens = claimTokens;
            this.maxVaultCapacity = maxVaultCapacity;
            this.minVaultLimit = minVaultLimit;
            this.saleStartTime = saleStartTime;
            this.saleEndTime = saleEndTime;
            this.termStartTime = termStartTime;
            this.termEndTime = termEndTime;
            this.organization = organization;
            this.mFee = mFee;
            this.rFee = rFee;
            this.transferSigner = transferSigner;
        }

        public CreateVaultReq(Uint256 id, Address depositToken, DynamicArray<Address> claimTokens, Uint256 maxVaultCapacity, Uint256 minVaultLimit, Uint256 saleStartTime, Uint256 saleEndTime, Uint256 termStartTime, Uint256 termEndTime, Address organization, Uint256 mFee, Uint256 rFee, Address transferSigner) {
            super(id, depositToken, claimTokens, maxVaultCapacity, minVaultLimit, saleStartTime, saleEndTime, termStartTime, termEndTime, organization, mFee, rFee, transferSigner);
            this.id = id.getValue();
            this.depositToken = depositToken.getValue();
            this.claimTokens = claimTokens.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.maxVaultCapacity = maxVaultCapacity.getValue();
            this.minVaultLimit = minVaultLimit.getValue();
            this.saleStartTime = saleStartTime.getValue();
            this.saleEndTime = saleEndTime.getValue();
            this.termStartTime = termStartTime.getValue();
            this.termEndTime = termEndTime.getValue();
            this.organization = organization.getValue();
            this.mFee = mFee.getValue();
            this.rFee = rFee.getValue();
            this.transferSigner = transferSigner.getValue();
        }
    }

    public static class UpdateVaultReq extends StaticStruct {
        public BigInteger id;

        public BigInteger saleStartTime;

        public BigInteger saleEndTime;

        public BigInteger maxVaultCapacity;

        public UpdateVaultReq(BigInteger id, BigInteger saleStartTime, BigInteger saleEndTime, BigInteger maxVaultCapacity) {
            super(new org.web3j.abi.datatypes.generated.Uint256(id), 
                    new org.web3j.abi.datatypes.generated.Uint256(saleStartTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(saleEndTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(maxVaultCapacity));
            this.id = id;
            this.saleStartTime = saleStartTime;
            this.saleEndTime = saleEndTime;
            this.maxVaultCapacity = maxVaultCapacity;
        }

        public UpdateVaultReq(Uint256 id, Uint256 saleStartTime, Uint256 saleEndTime, Uint256 maxVaultCapacity) {
            super(id, saleStartTime, saleEndTime, maxVaultCapacity);
            this.id = id.getValue();
            this.saleStartTime = saleStartTime.getValue();
            this.saleEndTime = saleEndTime.getValue();
            this.maxVaultCapacity = maxVaultCapacity.getValue();
        }
    }

    public static class ClaimEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String user;
    }

    public static class CreateEventResponse extends BaseEventResponse {
        public BigInteger id;
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String user;

        public BigInteger amount;

        public BigInteger soldAmount;
    }

    public static class ReinvestEventResponse extends BaseEventResponse {
        public BigInteger id;

        public BigInteger investId;

        public String to;
    }

    public static class SettleEventResponse extends BaseEventResponse {
        public BigInteger id;
    }

    public static class SoldOutEventResponse extends BaseEventResponse {
        public BigInteger id;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public BigInteger id;
    }

    public static class UpdateEventResponse extends BaseEventResponse {
        public BigInteger id;
    }

    public static class WithdrawEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String user;
    }
}
